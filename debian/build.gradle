subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'

  /* See the API Level defined in version_defaults.mk provided by
   * src:android-platform-build.
   */
  group = 'com.android'
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
  version = '23'

  repositories {
    maven { url 'file:///usr/share/maven-repo' }
  }

  configurations {
    doclava /* Classpaths for executing Doclava */
    forStubs /* For generating stubs */
  }

  dependencies {
    doclava 'com.google.doclava:doclava:debian'
  }

  task poms {
    outputs.files "${buildDir}/${project.name}.pom"
    doFirst {
      pom { project {} }.writeTo("${buildDir}/${project.name}.pom")
    }
  }

  task stubs {
    outputs.dir "${buildDir}/stubs"
    doFirst {
      def sourceFiles = sourceSets.forStubs.allJava.join(' ')
      def classpath = configurations.forStubs.collect().join(':')
      def docletpath = "${configurations.doclava.collect().join(':')}:" +
                       '/usr/lib/jvm/default-java/lib/tools.jar'
      def stubsDir = "${buildDir}/stubs"
      def javaFlags = "-classpath $docletpath com.google.doclava.Doclava "
      /* From frameworks/base/Android.mk */
      def doclavaFlags = "-classpath $classpath " +
                         '-doclet com.google.doclava.Doclava ' +
                         '-hdf sdk.version 6.0 -hdf sdk.rel.id 1 -hdf sdk.preview 0 ' +
                         '-hide 111 -hide 113 ' +
                         '-hidePackage com.android.org.conscrypt ' +
                         '-nodocs ' +
                         '-offlinemode ' +
                         '-quiet ' +
                         "-stubs $stubsDir " +
                         '-XDignore.symbol.file '
      def process = "java $javaFlags $sourceFiles $doclavaFlags".execute()
      process.waitForProcessOutput(System.out, System.err)
      if (process.exitValue() != 0) {
        throw new TaskExecutionException('Failed to generate stubs source.', null)
      }
    }
  }

  assemble.dependsOn 'poms'
  compileJava.dependsOn 'stubs'
  clean.doLast {
    delete "${buildDir}/*.pom"
    delete "${buildDir}/stubs"
  }
}

project(':android') {
  ext {
    /* From <build/core/pathmap.mk> */
    srcLocations = [
      "${rootDir}/../frameworks/base/core/java",
      "${rootDir}/../frameworks/base/drm/java",
      "${rootDir}/../frameworks/base/graphics/java",
      "${rootDir}/../frameworks/base/keystore/java",
      "${rootDir}/../frameworks/base/location/java",
      "${rootDir}/../frameworks/base/media/java",
      "${rootDir}/../frameworks/base/media/mca/effect/java",
      "${rootDir}/../frameworks/base/media/mca/filterfw/java",
      "${rootDir}/../frameworks/base/media/mca/filterpacks/java",
      "${rootDir}/../frameworks/base/opengl/java",
      "${rootDir}/../frameworks/base/rs/java",
      "${rootDir}/../frameworks/base/sax/java",
      "${rootDir}/../frameworks/base/telecomm/java",
      "${rootDir}/../frameworks/base/telephony/java",
      "${rootDir}/../frameworks/base/test-runner/src",
      "${rootDir}/../frameworks/base/wifi/java"
    ]
  }

  dependencies {
  /*
    forStubs 'com.android:conscrypt:debian'
    forStubs 'com.googlecode.libphonenumber:geocoder:2.x'
    forStubs 'com.googlecode.libphonenumber:libphonenumber:debian'
    forStubs 'junit:junit:4.x'
    forStubs 'org.bouncycastle:bcprov:debian'
    forStubs 'org.ccil.cowan.tagsoup:tagsoup:debian'
    */
  }

  sourceSets {
    forStubs {
      java {
        for (def dir in srcLocations) { srcDir(dir) }
        srcDir "${rootDir}/../libcore/dalvik/src/main/java"
        srcDir "${rootDir}/../libcore/json/src/main/java"
        srcDir "${rootDir}/../libcore/libart/src/main/java"
        srcDir "${rootDir}/../libcore/luni/src/main/java"
        srcDir "${rootDir}/../libcore/xml/src/main/java"
        srcDir "${rootDir}/../frameworks/opt/net/voip/src/java/android"
        srcDir "${rootDir}/../frameworks/opt/telephony/src/java/android"
        srcDir "${rootDir}/../external/junit/src/junit/framework"
        exclude 'JUnit4TestAdapter.java'
        exclude 'JUnit4TestAdapterCache.java'
        exclude 'JUnit4TestCaseFacade.java'
        srcDir "${rootDir}/../external/junit/src/junit/runner"
        srcDir "${buildDir}/aidl"
        srcDir "${rootDir}/out/R"
        /* From <libcore/Docs.mk> and
         * <development/build/tools/mk_sources_zip.py> */
        exclude 'dalvik/system/profiler'
        exclude 'libcore'
        exclude 'luni/src/main/java/java/text/IcuIteratorWrapper.java'
        exclude 'org/apache/harmony'
        exclude 'org/kxml2'
        exclude 'sun'
      }
    }
    main {
      java {
        srcDir "${buildDir}/stubs"
      }
      resources {
        srcDir "${rootDir}/out/framework-res"
      }
    }
  }

  /* No idea why these are not stripped by Doclava, but they are necessary for
     compiling some other classes in android.jar, so we will have to strip them
     here.
     
     These classes have been marked with "@hide", so Doclava should strip them.
     Probably bugs? */
  jar {
    exclude 'android/app/backup/RestoreDescription.class'
    exclude 'android/app/backup/RestoreSet.class'
    exclude 'android/bluetooth/BluetoothActivityEnergyInfo.class'
    exclude 'android/content/pm/KeySet.class'
    exclude 'android/content/pm/ManifestDigest.class'
    exclude 'android/content/pm/PackageCleanItem.class'
    exclude 'android/content/pm/PackageParser*.class'
    exclude 'android/content/pm/PackageUserState.class'
    exclude 'android/content/pm/ParceledListSlice.class'
    exclude 'android/content/pm/VerificationParams.class'
    exclude 'android/content/pm/VerifierDeviceIdentity.class'
    exclude 'android/content/pm/VerifierInfo.class'
    exclude 'android/net/NetworkStats*.class'
    exclude 'android/net/wifi/WifiActivityEnergyInfo.class'
    exclude 'android/os/BatteryStats*.class'
    exclude 'android/os/storage/DiskInfo.class'
    exclude 'android/os/storage/IMountService.class'
    exclude 'android/os/storage/IMountServiceListener.class'
    exclude 'android/os/storage/IMountShutdownObserver.class'
    exclude 'android/os/storage/IObbActionListener.class'
    exclude 'android/os/storage/StorageVolume.class'
    exclude 'android/os/storage/VolumeInfo.class'
    exclude 'android/os/storage/VolumeRecord.class'
    exclude 'android/util/IntArray.class'
    exclude 'android/widget/ActionMenuPresenter.class'
    exclude 'java/util/jar/StrictJarFile.class'
    exclude {
      if (it.isDirectory && it.getPath().startsWith('com/')) {
        if ('com/android/internal/util'.contains(it.getPath())) {
          false
        } else {
          true
        }
      } else {
        if (it.getPath().startsWith('com/')) {
          if (it.getPath().contains(
            'com/android/internal/util/Predicate.class'
          )) {
            false
          } else {
            true
          }
        }
      }
    }
    exclude {
      if (it.getPath().startsWith('android/content/pm/I')) {
        if (it.getPath().endsWith('InstrumentationInfo.class')) {
          false
        } else {
          true
        }
      } else {
        false
      }
    }
  }

}

project(':uiautomator') {
  dependencies {
    compile project(':android')
    forStubs project(':android')
  }

  sourceSets {
    main.java {
      srcDir "${buildDir}/stubs"
      /* By observing the upstream uiautomator.jar */
      include '**/Configurator.java'
      include '**/IAutomationSupport.java'
      include '**/UiAutomatorTestCase.java'
      include '**/UiCollection.java'
      include '**/UiDevice.java'
      include '**/UiObject.java'
      include '**/UiObjectNotFoundException.java'
      include '**/UiScrollable.java'
      include '**/UiSelector.java'
      include '**/UiWatcher.java'
    }
    forStubs.java {
      srcDir "${rootDir}/../frameworks/base/cmds/uiautomator/library/core-src"
      srcDir "${rootDir}/../frameworks/base/cmds/uiautomator/library/testrunner-src"
    }
  }
}
